package uefs.redes.model;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

import uefs.redes.define.Constants;
import uefs.redes.define.Pack;

public class ServidorArquivos implements Runnable {
	
	private Socket socket;
	
	public ServidorArquivos(Socket s) throws IOException
	{
		this.socket = s;
		//iniciar array de videos do pc (arquivo)
	}
	@Override
	public void run()
	{
		try	
		{
			Pack x ;
			ObjectInputStream in;
			ObjectOutputStream out;
			do
			{
				
					in =  new  ObjectInputStream(socket.getInputStream());
					 x = (Pack) in.readObject();
	
					switch(x.getCODE()) {
					
						case Constants.DOWNLOAD_REQ:
							
							requestFile("nome");
								
							// CODIGO 
							x.setCODE(Constants.DOWNLOAD_REP);
							out = new ObjectOutputStream(socket.getOutputStream());
							out.writeObject(x);
							break;
						default:
							
							break;
						
					
					}
							
			}
			while(true);
			
			
		} 
		catch (Exception e)
		{
			System.out.println("cliente desco");								
		}	
	}
	
	
	

	 
    public void requestFile(String name_file) 
    {
        // Checa se a transferencia foi completada com sucesso
        OutputStream socketOut = null;
        ServerSocket servsock = null;
        FileInputStream fileIn = null;
 
        try {
          
            // Criando tamanho de leitura
            byte[] cbuffer = new byte[1024];
            int bytesRead;
 
            // Criando arquivo que sera transferido pelo servidor
            File file = new File("c:\\Teste\\they.avi");
            fileIn = new FileInputStream(file);
            System.out.println("Lendo arquivo...");
             
            // Criando canal de transferencia
            socketOut = socket.getOutputStream();
 
            // Lendo arquivo criado e enviado para o canal de transferencia
            System.out.println("Enviando Arquivo...");
            while ((bytesRead = fileIn.read(cbuffer)) != -1) {
                socketOut.write(cbuffer, 0, bytesRead);
                socketOut.flush();
            }
            
            System.out.println("Arquivo Enviado!");
          
        } catch (Exception e) {
            // Mostra erro no console
            e.printStackTrace();
        } finally {
            if (socketOut != null) {
                try {
                    socketOut.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
 
            if (servsock != null) {
                try {
                    servsock.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
 
            if (fileIn != null) {
                try {
                    fileIn.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
   
    }
    
	
	
	
}
