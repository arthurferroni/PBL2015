package uefs.redes.model;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;

import uefs.redes.controller.ControllerClient;
import uefs.redes.define.Constants;
import uefs.redes.define.Pack;

public class ClientAcess implements Runnable {

	
	private Socket socket;
	
	private String name_client;
	private String login_client;
	private String pass_client;
	
	@SuppressWarnings("unused")
	private ArrayList<Object>movies = new  ArrayList<>();
	@SuppressWarnings("unused")
	private ArrayList<Object>history = new  ArrayList<>();
	@SuppressWarnings("unused")
	private ControllerClient controll_client = null;
	
	public ClientAcess(Socket sock, ControllerClient cCLient) throws IOException
	{
		socket = sock;	
		controll_client = cCLient;
	}
	public ClientAcess(Socket sock) throws IOException
	{
		socket = sock;	
	
	}
	
	@SuppressWarnings("unused")
	@Override
	public void run() 											//	INHERIT THE RUN METHOD FROM THE Runnable INTERFACE
	{
		try
		{
			Pack pack_reqs  = null;
			ObjectInputStream in = null;
			ObjectOutputStream out = null;
			do
			{
				in =  new  ObjectInputStream(socket.getInputStream());
				 pack_reqs = (Pack) in.readObject();

				switch(pack_reqs.getCode()) {
				case Constants.LOGIN_REP:
					System.out.println("login-REP");
	
					break;
				case Constants.LOGOUT_REP:
					System.out.println("logout-REP");
					break;
				case Constants.REGISTER_REP:
					System.out.println("register-REP");
					break;
				case Constants.SEARCH_REP:
					System.out.println("search-REP");
					break;
				case Constants.DOWNLOAD_REP:
					System.out.println("donw-REP");
					
					break;
				default:
					break;
					
				
				}
				
			}
			while(true);
			
		}
		catch (Exception e)
		{
			e.printStackTrace();								//	MOST LIKELY WONT BE AN ERROR, GOOD PRACTICE TO CATCH THOUGH
		} 
	}
	

}
