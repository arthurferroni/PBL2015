package uefs.redes.transporte;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

import uefs.redes.define.Constants;
import uefs.redes.define.Pack;

public class ServidorFILE implements Runnable{

	
	private Socket socket;
	
	public ServidorFILE(Socket s) throws IOException
	{
		this.socket = s;
		//iniciar array de videos do pc (arquivo)
	}
	@Override
	public void run()
	{
		try	
		{
			Pack x ;
			ObjectInputStream in;
			ObjectOutputStream out;
			do
			{
				
					in =  new  ObjectInputStream(socket.getInputStream());
					 x = (Pack) in.readObject();
	
					switch(x.getCODE()) {
					case Constants.LOGIN_REQ:
						System.out.println("login-REQ");
						//
						
						
						// CODIGO 
						x.setCODE(Constants.LOGIN_REP);
						out = new ObjectOutputStream(socket.getOutputStream());
						out.writeObject(x);
						break;
					case Constants.LOGOUT_REQ:
						System.out.println("logout-REQ");
						//
						
						
						// CODIGO 
						x.setCODE(Constants.LOGOUT_REP);
						out = new ObjectOutputStream(socket.getOutputStream());
						out.writeObject(x);
						break;
					case Constants.REGISTER_REQ:
						System.out.println("register-REQ");
						//
						
						
						// CODIGO 
						x.setCODE(Constants.REGISTER_REP);
						out = new ObjectOutputStream(socket.getOutputStream());
						out.writeObject(x);
						break;
					case Constants.SEARCH_REQ:
						System.out.println("search-REQ");
						//
						
						
						// CODIGO 
						x.setCODE(Constants.SEARCH_REP);
						out = new ObjectOutputStream(socket.getOutputStream());
						out.writeObject(x);
						break;
					case Constants.DOWNLOAD_REQ:
						System.out.println("DONW-REQ");
						//
					
						
						waitForClient();
						// CODIGO 
						x.setCODE(Constants.DOWNLOAD_REP);
						out = new ObjectOutputStream(socket.getOutputStream());
						out.writeObject(x);
						break;
					default:
						
						break;
						
					
					}
							
			}
			while(true);
			
			
		} 
		catch (Exception e)
		{
		System.out.println("cliente desco");								
		}	
	}
	public void waitForClient() {
		// Checa se a transferencia foi completada com sucesso
		 OutputStream socketOut = null;
		 ServerSocket servsock = null;
		 FileInputStream fileIn = null;
		 String name_file = "they";

		try {
			

			// Criando tamanho de leitura
			byte[] cbuffer = new byte[1024];
			int bytesRead;

			// Criando arquivo que sera transferido pelo servidor
			File file = new File("c:\\Teste\\they.avi");
			fileIn = new FileInputStream(file);
			System.out.println("Lendo arquivo...");
			
			
			// Criando canal de transferencia
			socketOut = socket.getOutputStream();

			// Lendo arquivo criado e enviado para o canal de transferencia
			System.out.println("Enviando Arquivo...");
			while ((bytesRead = fileIn.read(cbuffer)) != -1) {
				socketOut.write(cbuffer, 0, bytesRead);
				socketOut.flush();
			}

			System.out.println("Arquivo Enviado!");
		} catch (Exception e) {
			// Mostra erro no console
			e.printStackTrace();
		} finally {
			if (socketOut != null) {
				try {
					socketOut.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			if (servsock != null) {
				try {
					servsock.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			if (fileIn != null) {
				try {
					fileIn.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

}
