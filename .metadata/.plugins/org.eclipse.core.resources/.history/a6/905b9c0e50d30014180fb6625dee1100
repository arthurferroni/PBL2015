package uefs.redes.servidorArquivo;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class ServerTransfer {
	
	private Socket sock;
	private OutputStream socketOut = null;
	private ServerSocket servsock = null;
	private FileInputStream fileIn = null;
	@SuppressWarnings("unused")
	private String name_file = "they";
	
	public ServerTransfer(Socket s,String nome)
	{
		sock = s;
		name_file = nome;
	}

	public void waitForClient() {
		// Checa se a transferencia foi completada com sucesso
		

		try {
			

			// Criando tamanho de leitura
			byte[] cbuffer = new byte[1024];
			int bytesRead;

			// Criando arquivo que sera transferido pelo servidor
			File file = new File("c:\\Teste\\they.avi");
			fileIn = new FileInputStream(file);
			System.out.println("Lendo arquivo...");
			
			
			// Criando canal de transferencia
			socketOut = sock.getOutputStream();

			// Lendo arquivo criado e enviado para o canal de transferencia
			System.out.println("Enviando Arquivo...");
			while ((bytesRead = fileIn.read(cbuffer)) != -1) {
				socketOut.write(cbuffer, 0, bytesRead);
				socketOut.flush();
			}

			System.out.println("Arquivo Enviado!");
		} catch (Exception e) {
			// Mostra erro no console
			e.printStackTrace();
		} finally {
			if (socketOut != null) {
				try {
					socketOut.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			if (servsock != null) {
				try {
					servsock.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			if (fileIn != null) {
				try {
					fileIn.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}

