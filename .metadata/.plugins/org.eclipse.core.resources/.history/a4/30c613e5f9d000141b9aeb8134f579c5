package uefs.redes.transporte;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;

public class ClientTrans implements Runnable  {
	private Socket sockServer = null;
	private FileOutputStream fos = null;
	private InputStream is = null;
	private String name_file = null;
	public ClientTrans(Socket s) 
	{
		sockServer = s;	
	
	}
	
	@Override
	public void run() {
		getFileFromServeR();
	}
	private void getFileFromServeR() {
		

		try {
			
			
			is = sockServer.getInputStream();

			// Cria arquivo local no cliente
			fos = new FileOutputStream(new File("c:\\Teste1\\"+name_file+".avi"));
			System.out.println("Arquivo Local Criado c:\\temp\\source-copy.zip");
			
			// Prepara variaveis para transferencia
			byte[] cbuffer = new byte[1024];
			int bytesRead;

			// Copia conteudo do canal
			System.out.println("Recebendo arquivo...");
			while ((bytesRead = is.read(cbuffer)) != -1) {
				fos.write(cbuffer, 0, bytesRead);
				fos.flush();
			}
			
			System.out.println("Arquivo recebido!");
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (sockServer != null) {
				try {
					sockServer.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}

			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}

			if (is != null) {
				try {
					is.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		}

	}

}
